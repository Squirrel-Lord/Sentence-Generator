# This class stores a list of context free grammar rules.
# Rules are entered by the user. They can then be parsed
# into a hashtable with nonterminal keys and right hand side values.
# After parsing, all possible sentences that can be generated
# with a maximum length can be outputted.

# Author:: Ross Baldwin

class CFGrammar

  # This method creates a new CFGrammar instance
  def initialize
    @cfg_rules = Array.new
    @count_rules = 0
    @max_len = 0
    @hash_words = Hash.new
    @nonterminals = Array.new
  end
  
  # This method reads context free grammar rules,
  # parses the input, and displays all possible
  # sentences that can be generated by the grammar.
  def run
    read_rules
    parse_nonterminals
	parse_words
    print "There are " + @nonterminals.length.to_s
	puts " nonterminal symbols."
	print "There are " + @count_rules.to_s
    puts " rules in the CFG that follows."
	puts ""
	print_rules
	puts ""
	puts "Sentences of length " + @max_len.to_s + " or less are:"
	puts ""
	generate_words
  end
  
  # This method reads in context free grammar rules 
  # and the maximum length of sentences to generate.
  def read_rules
    line = gets.chomp
    while line.length.to_i != 1
	  @cfg_rules.push(line)
    line = gets.chomp
    end
	@max_len = line.to_i
	@cfg_rules.pop
	@count_rules = @cfg_rules.length
  end

  # This method prints all contex free grammar rules.
  def print_rules
    @cfg_rules.each {|rule| puts rule}
  end
  
  # This method stores all nonterminal symbols
  # in the corresponding array.
  def parse_nonterminals
    for i in 0...@cfg_rules.length
	  rule_words = @cfg_rules[i].split(" ");
	  if (!(@nonterminals.include?(rule_words[0])))
	    @nonterminals.push(rule_words[0])
	  end
	end
  end
  
  # This method parses the inputted grammar rules and
  # stores them in a hash table. The keys are all of the
  # nonterminal symbols and the values are the
  # nonterminals' right hand side words.
  def parse_words
    @nonterminals.each {|word| @hash_words[word.to_s] = Array.new}
    for i in 0...@cfg_rules.length
	  rule_words = @cfg_rules[i].to_s.split(" ")
	  key = rule_words[0]
	  rule_words.shift
	  rule_words.shift
	  rhs = ""
	  for i in 0...rule_words.length.to_i
	    rhs += rule_words[i]
		if (i != rule_words.length.to_i - 1)
		  rhs += " "
		end
      end
	  @hash_words[key.to_s].push(rhs.to_s)
	end
  end
	
	# This method displays all possible sentences
	# that can be generated from the context free
	# grammar rules stored in the class instance
	def generate_words
	  stack = Array.new
	  stack.push(@nonterminals[0])
	  while (stack.length > 0)
	  	found_nonterminal = false
	    element = stack.pop #get next element
		popped_words = element.split(" ") #split into words
		numWords = popped_words.length
		if numWords <= @max_len.to_i #check if sentence is <= max_len
		  for i in 0...popped_words.length #search for nonterminals
		    if (@hash_words[popped_words[i]] != nil)
			  found_nonterminal = true #found a nonterminal
			  rhs = Array.new
			  rhs = @hash_words[popped_words[i]] #nonterminal's rhs
			  for j in 0...@hash_words[popped_words[i]].length
			    new_sentence = element.dup #build the new sentence
			    new_sentence = 
				new_sentence.sub(popped_words[i], rhs[j].to_s)
				stack.push(new_sentence) #push each new sentence
			  end
			  break #break if a nonterminal was found
			end
		  end
		  if !found_nonterminal
		    puts element #if no nonterminal found, puts the sentence
		  end
		end
	  end
	end
 
end